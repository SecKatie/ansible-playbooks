---
- name: Download cert-manager manifest
  ansible.builtin.get_url:
    url: "{{ cert_manager_manifest_url }}"
    dest: "{{ cert_manager_manifest_dest }}"
    mode: '0644'
  register: download_result
  until: download_result is succeeded
  retries: 3
  delay: 5
  changed_when: download_result.changed

- name: Deploy cert-manager
  kubernetes.core.k8s:
    state: present
    src: "{{ cert_manager_manifest_dest }}"
  register: deploy_result
  changed_when: deploy_result.changed

- name: Wait for cert-manager namespace to be created
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Namespace
    name: "{{ cert_manager_namespace }}"
  register: namespace_info
  until: namespace_info.resources | length > 0
  retries: 30
  delay: 5

- name: Wait for cert-manager pods to be ready
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Pod
    namespace: "{{ cert_manager_namespace }}"
    label_selectors:
      - "app.kubernetes.io/instance=cert-manager"
  register: pod_info
  until: >
    pod_info.resources | length >= 3 and
    pod_info.resources | selectattr('status.phase', 'equalto', 'Running') | list | length == (pod_info.resources | length)
  retries: "{{ (cert_manager_wait_timeout / 10) | int }}"
  delay: 10

- name: Check if cmctl is available
  ansible.builtin.shell: which cmctl
  register: cmctl_check
  failed_when: false
  changed_when: false
  when: cert_manager_verify_installation

- name: Verify cert-manager API is ready (using cmctl)
  ansible.builtin.shell: cmctl check api --wait=2m
  register: api_check
  when: 
    - cert_manager_verify_installation
    - cmctl_check.rc == 0
  changed_when: false

- name: Verify cert-manager API is ready (manual check)
  kubernetes.core.k8s_info:
    api_version: cert-manager.io/v1
    kind: ClusterIssuer
  register: crd_check
  when: 
    - cert_manager_verify_installation
    - cmctl_check.rc != 0
  changed_when: false

- name: Create end-to-end test resources
  kubernetes.core.k8s:
    state: present
    definition:
      - apiVersion: v1
        kind: Namespace
        metadata:
          name: cert-manager-test
      - apiVersion: cert-manager.io/v1
        kind: Issuer
        metadata:
          name: test-selfsigned
          namespace: cert-manager-test
        spec:
          selfSigned: {}
      - apiVersion: cert-manager.io/v1
        kind: Certificate
        metadata:
          name: selfsigned-cert
          namespace: cert-manager-test
        spec:
          dnsNames:
            - example.com
          secretName: selfsigned-cert-tls
          issuerRef:
            name: test-selfsigned
  when: cert_manager_e2e_test

- name: Wait for test certificate to be ready
  kubernetes.core.k8s_info:
    api_version: cert-manager.io/v1
    kind: Certificate
    name: selfsigned-cert
    namespace: cert-manager-test
    wait: true
    wait_condition:
      type: Ready
      status: "True"
    wait_timeout: 60
  when: cert_manager_e2e_test

- name: Clean up test resources
  kubernetes.core.k8s:
    state: absent
    api_version: v1
    kind: Namespace
    name: cert-manager-test
  when: cert_manager_e2e_test

- name: Display cert-manager installation status
  ansible.builtin.debug:
    msg:
      - "ðŸŽ‰ cert-manager has been installed successfully!"
      - ""
      - "ðŸ“‹ Installation details:"
      - "   â€¢ Version: {{ cert_manager_version }}"
      - "   â€¢ Namespace: {{ cert_manager_namespace }}"
      - "   â€¢ Components: cert-manager, cert-manager-cainjector, cert-manager-webhook"
      - ""
      - "âœ… Verification status:"
      - "   â€¢ Pods ready: {{ pod_info.resources | selectattr('status.phase', 'equalto', 'Running') | list | length }}/{{ pod_info.resources | length }}"
      - "   â€¢ API ready: {{ 'Yes' if (api_check is defined and api_check.rc is defined and api_check.rc == 0) or (crd_check is defined and crd_check.resources is defined) else 'Check manually with: cmctl check api' }}"
      - "   â€¢ E2E test: {{ 'Passed' if cert_manager_e2e_test else 'Skipped' }}"
      - ""
      - "ðŸ“– Next steps:"
      - "   1. Create issuers (ClusterIssuer or Issuer resources)"
      - "   2. Request certificates using Certificate resources"
      - "   3. See https://cert-manager.io/docs/configuration/ for configuration options"
      - ""
      - "ðŸ”§ Useful commands:"
      - "   â€¢ Check status: kubectl get pods -n {{ cert_manager_namespace }}"
      - "   â€¢ Verify API: cmctl check api"
      - "   â€¢ View logs: kubectl logs -n {{ cert_manager_namespace }} deployment/cert-manager" 