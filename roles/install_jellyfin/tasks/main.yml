---
- name: Create Jellyfin namespace
  kubernetes.core.k8s:
    name: jellyfin
    api_version: v1
    kind: Namespace
    state: present
    definition:
      metadata:
        labels:
          app.kubernetes.io/part-of: media
          app.kubernetes.io/managed-by: ansible
        annotations:
          app.kubernetes.io/description: "Jellyfin media server namespace"

- name: Deploy Jellyfin storage components
  kubernetes.core.k8s:
    state: present
    src: "{{ role_path }}/files/storage.yaml"

- name: Deploy Jellyfin application
  kubernetes.core.k8s:
    state: present
    src: "{{ role_path }}/files/jellyfin.yaml"

- name: Check if Cloudflare tunnel already exists
  ansible.builtin.shell: |
    cloudflared tunnel list --output json
  register: tunnel_list_result
  ignore_errors: true
  changed_when: false

- name: Extract existing tunnel information
  ansible.builtin.set_fact:
    existing_tunnel: "{{ (tunnel_list_result.stdout | from_json) | selectattr('name', 'equalto', 'jellyfin-tunnel') | list | first | default({}) }}"
  when: tunnel_list_result.rc == 0 and tunnel_list_result.stdout != ""

- name: Create Cloudflare tunnel if it doesn't exist
  ansible.builtin.shell: |
    cloudflared tunnel create jellyfin-tunnel
  register: tunnel_create_result
  ignore_errors: true
  when: existing_tunnel == {} or existing_tunnel is not defined

- name: Set tunnel information from existing tunnel
  ansible.builtin.set_fact:
    tunnel_id: "{{ existing_tunnel.id }}"
    creds_path: "{{ ansible_env.HOME }}/.cloudflared/{{ existing_tunnel.id }}.json"
  when: existing_tunnel != {} and existing_tunnel is defined

- name: Set tunnel information from newly created tunnel
  ansible.builtin.set_fact:
    tunnel_id: "{{ tunnel_create_result.stdout | regex_search('([a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12})', '\\\\1') | first }}"
    creds_path: "{{ tunnel_create_result.stdout | regex_search('(/.*?\\\\.json)', '\\\\1') | first }}"
  when: tunnel_create_result is defined and tunnel_create_result is not skipped and tunnel_create_result.rc == 0

- name: Check if tunnel credentials secret exists
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Secret
    name: jellyfin-tunnel-credentials
    namespace: jellyfin
  register: secret_check
  when: tunnel_id is defined and creds_path is defined

- name: Create or update tunnel credentials secret
  ansible.builtin.shell: |
    kubectl create secret generic jellyfin-tunnel-credentials \
      --from-file=credentials.json="{{ creds_path }}" \
      --namespace=jellyfin \
      --dry-run=client -o yaml | kubectl apply -f -
  register: secret_result
  when: 
    - tunnel_id is defined 
    - creds_path is defined
    - secret_check.resources | length == 0
  changed_when: true

- name: Deploy Cloudflare tunnel for Jellyfin
  kubernetes.core.k8s:
    state: present
    src: "{{ role_path }}/files/cloudflared.yaml"

- name: Wait for Jellyfin deployment to be ready
  kubernetes.core.k8s_info:
    api_version: apps/v1
    kind: Deployment
    name: jellyfin
    namespace: jellyfin
    wait: true
    wait_condition:
      type: Available
      status: "True"
    wait_timeout: 600

- name: Display deployment status
  ansible.builtin.debug:
    msg:
      - "🎉 Jellyfin has been deployed successfully!"
      - ""
      - "🔗 Cloudflare tunnel configured:"
      - "   • Tunnel ID: {{ tunnel_id }}"
      - "   • Tunnel URL: {{ tunnel_id }}.cfargotunnel.com"
      - "   • Status: {{ 'Using existing tunnel' if (existing_tunnel != {} and existing_tunnel is defined) else 'Created new tunnel' }} 'jellyfin-tunnel'"
      - ""
      - "📋 Next steps:"
      - "   1. Create DNS record: jellyfin.mulliken.net -> {{ tunnel_id }}.cfargotunnel.com"
      - "   2. Access Jellyfin at https://jellyfin.mulliken.net"
      - ""
      - "🏠 Internal access: http://jellyfin.jellyfin.svc.cluster.local:8096"
  when: tunnel_id is defined

- name: Display deployment status (manual setup required)
  ansible.builtin.debug:
    msg:
      - "🎉 Jellyfin has been deployed successfully!"
      - ""
      - "⚠️  Manual tunnel setup required:"
      - "   1. Create a Cloudflare tunnel named 'jellyfin-tunnel'"
      - "   2. Create the tunnel credentials secret:"
      - "      kubectl create secret generic jellyfin-tunnel-credentials \\"
      - "        --from-file=credentials.json=/path/to/your/tunnel/credentials.json \\"
      - "        --namespace=jellyfin"
      - "   3. Configure DNS record for jellyfin.mulliken.net to point to your tunnel"
      - "   4. Access Jellyfin at https://jellyfin.mulliken.net"
      - ""
      - "🏠 Internal access: http://jellyfin.jellyfin.svc.cluster.local:8096"
  when: tunnel_id is not defined