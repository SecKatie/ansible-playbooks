---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cloudflared
  namespace: jellyfin
  labels:
    app.kubernetes.io/name: cloudflared
    app.kubernetes.io/instance: jellyfin-tunnel
    app.kubernetes.io/part-of: media
    app.kubernetes.io/component: tunnel
    app.kubernetes.io/managed-by: ansible
  annotations:
    app.kubernetes.io/description: "Cloudflare Tunnel for Jellyfin media server"
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: cloudflared
      app.kubernetes.io/instance: jellyfin-tunnel
  replicas: 2
  template:
    metadata:
      labels:
        app.kubernetes.io/name: cloudflared
        app.kubernetes.io/instance: jellyfin-tunnel
        app.kubernetes.io/part-of: media
        app.kubernetes.io/component: tunnel
        app.kubernetes.io/managed-by: ansible
    spec:
      containers:
      - name: cloudflared
        image: cloudflare/cloudflared:latest
        args:
        - tunnel
        - --config
        - /etc/cloudflared/config/config.yaml
        - run
        livenessProbe:
          httpGet:
            path: /ready
            port: 2000
          failureThreshold: 1
          initialDelaySeconds: 10
          periodSeconds: 10
        resources:
          requests:
            cpu: "100m"
            memory: "128Mi"
          limits:
            cpu: "200m"
            memory: "256Mi"
        securityContext:
          runAsUser: 1000
          runAsNonRoot: true
        volumeMounts:
        - name: config
          mountPath: /etc/cloudflared/config
          readOnly: true
        - name: creds
          mountPath: /etc/cloudflared/creds
          readOnly: true
      volumes:
      - name: creds
        secret:
          secretName: jellyfin-tunnel-credentials
      - name: config
        configMap:
          name: cloudflared
          items:
          - key: config.yaml
            path: config.yaml
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: cloudflared
  namespace: jellyfin
  labels:
    app.kubernetes.io/name: cloudflared
    app.kubernetes.io/instance: jellyfin-tunnel
    app.kubernetes.io/part-of: media
    app.kubernetes.io/component: tunnel
    app.kubernetes.io/managed-by: ansible
  annotations:
    app.kubernetes.io/description: "Configuration for Cloudflare Tunnel"
data:
  config.yaml: |
    # Name of the tunnel you want to run
    tunnel: jellyfin-tunnel
    credentials-file: /etc/cloudflared/creds/credentials.json
    # Serves the metrics server under /metrics and the readiness server under /ready
    metrics: 0.0.0.0:2000
    # Autoupdates applied in a k8s pod will be lost when the pod is removed or restarted
    no-autoupdate: true
    # The `ingress` block tells cloudflared which local service to route incoming
    # requests to. For more about ingress rules, see
    # https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/ingress
    ingress:
    # Route traffic to the Jellyfin service
    - hostname: jellyfin.mulliken.net
      service: http://jellyfin.jellyfin.svc.cluster.local:8096
    # This rule matches any traffic which didn't match a previous rule, and responds with HTTP 404
    - service: http_status:404 